name: 🚀 Release and Publish

on:
  workflow_dispatch:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      REGISTRY: https://registry.npmjs.org
    steps:
      - name: 🛠️ 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: ${{ env.REGISTRY }}

      - name: 📝 读取 package 名称与版本
        id: pkg
        run: |
          echo "name=$(jq -r .name package.json)" >> $GITHUB_OUTPUT
          echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: 🌐 检查目标版本是否已存在
        id: published
        run: |
          PACKAGE="${{ steps.pkg.outputs.name }}"
          VERSION="${{ steps.pkg.outputs.version }}"
          EXISTS=$(npm view "$PACKAGE@$VERSION" --registry $REGISTRY > /dev/null 2>&1 && echo "true" || echo "false")
          echo "exists=$EXISTS" >> $GITHUB_OUTPUT

      - name: ✅ 决定是否需要发布
        id: decide
        run: |
          if [ "${{ steps.published.outputs.exists }}" = "true" ]; then
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: 📦 准备 pnpm
        if: steps.decide.outputs.should_publish == 'true'
        uses: pnpm/action-setup@v4
        with:
          version: 9.13.2
          run_install: false
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_REGISTRY: ${{ env.REGISTRY }}

      # - name: 🔐 准备 npm auth
      #   if: steps.decide.outputs.should_publish == 'true'
      #   run: |
      #     echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: 🧾 预览将被打包的内容
        if: steps.decide.outputs.should_publish == 'true'
        run: npm pack --dry-run

      - name: 🧹 删除开发依赖
        run: pnpm pkg delete devDependencies
        if: steps.decide.outputs.should_publish == 'true'

      - name: 🚀 发布到 NPM
        if: steps.decide.outputs.should_publish == 'true'
        id: npm_publish
        env:
          PACKAGE_NAME: ${{ steps.pkg.outputs.name }}
          LOCAL_VERSION: ${{ steps.pkg.outputs.version }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -e
          VERSION="$LOCAL_VERSION"
          TAG_FLAG=""
          if echo "$VERSION" | grep -Eiq "alpha|beta|rc|next"; then
            TAG_NAME=$(echo "$VERSION" | grep -Eoi "alpha|beta|rc|next" | head -n1)
            TAG_FLAG="--tag $TAG_NAME"
          else
            TAG_FLAG=""
          fi


          echo "发布: $PACKAGE_NAME@$VERSION"
          echo "Tag 参数: $TAG_FLAG"

          if [ -z "$TAG_FLAG" ]; then
            npm publish --access public
          else
            npm publish --access public $TAG_FLAG
          fi

      - name: 🔄 同步到国内镜像源
        if: steps.decide.outputs.should_publish == 'true'
        env:
          PACKAGE_NAME: ${{ steps.pkg.outputs.name }}
        run: |
          curl -X PUT "https://registry-direct.npmmirror.com/-/package/$PACKAGE_NAME/syncs"

      - name: 🔖 确定是否为 prerelease（alpha/beta/rc）
        if: steps.decide.outputs.should_publish == 'true'
        id: release_type
        run: |
          VERSION="${{ steps.pkg.outputs.version }}"
          if echo "$VERSION" | grep -qi "alpha\|beta\|rc"; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: 🏷️ 创建并 push Git tag
        if: steps.decide.outputs.should_publish == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG="v${{ steps.pkg.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 若 tag 已存在则跳过
          if git rev-parse "refs/tags/$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists, skipping tag creation."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "Pushed tag $TAG"
          fi

      - name: 📝 生成 Release Notes
        if: steps.decide.outputs.should_publish == 'true'
        id: notes
        run: |
          set -e
          TAG="v${{ steps.pkg.outputs.version }}"

          # 保证有所有历史
          git fetch --prune --unshallow || true

          PREV_TAG=$(git describe --tags --abbrev=0 "$TAG^" 2>/dev/null || true)

          if echo "$TAG" | grep -Eq "alpha|beta|rc"; then
           # 预发布，正常生成日志
           if [ -n "$PREV_TAG" ]; then
            NOTES=$(git log --no-merges --pretty=format:'- %s (%h)' "${PREV_TAG}..HEAD")
           else
            NOTES=$(git log --no-merges --pretty=format:'- %s (%h)' -n 50)
           fi
          else
          # 正式版，合并所有自上一个正式版以来的日志
          # 找到上一个正式版 tag
          LAST_STABLE_TAG=$(git tag --list "v*" --sort=-creatordate | grep -Ev "alpha|beta|rc" | grep -v "^$TAG$" | head -n1)
          if [ -n "$LAST_STABLE_TAG" ]; then
            NOTES=$(git log --no-merges --pretty=format:'- %s (%h)' "${LAST_STABLE_TAG}..HEAD")
          else
            NOTES=$(git log --no-merges --pretty=format:'- %s (%h)' -n 50)
          fi
            fi

            # 如果没有内容，写一行提示
            if [ -z "$NOTES" ]; then
              NOTES="No changelog available."
            fi

            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "$NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

      - name: 🏁 创建 GitHub Release
        if: steps.decide.outputs.should_publish == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: "v${{ steps.pkg.outputs.version }}"
          name: "v${{ steps.pkg.outputs.version }}"
          body: ${{ steps.notes.outputs.notes }}
          draft: false
          prerelease: ${{ steps.release_type.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
